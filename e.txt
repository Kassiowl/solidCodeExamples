Princípio de inversão de dependência(DIP)


Basicamente, esse princípio fala que devemos sempre nos referir as classes
abstratas(interfaces), e não a classes concretas, isso porquê, podemos
facilmente substituir uma classe concreta(dependência) por outra classe 
concreta(outra dependência) desde que o contrato estabelecido pela interfaces
seja seguido, assim, nosso software não fica dependente da dependência, 
podemos substituir uma dependência por qualquer outra, mantendo assim o software 
fácil de manter e escalar.

Imagine que nosso software usa por exemplo o MySQL como database, e temos
nossa classe concreta que implementa tudo que precisamos para extrair e 
trabalhar com os dados do MySQL. Se a gente se refere nessa classe diretamente,
caso a gente queira parar de trabalhar com o MySQL(Por qualquer motivo que seja),
o software vai ter que ser mudado abruptamente e pesadamente modificado para que
seja adaptado para o novo sgbd. Imagine isso agora com diversas dependências em um software
em produção em grande escala... Vai gerar bugs e muita dor de cabeça, de fato.

Quando nós referirmos a classe abstrata, podemos fácilmente modificar a dependência, apenas temos
que seguir a interface, sem a necessidade de modificar todo o programa já escrito, basta fazer uma nova implementação. Como
estamos seguindo um contrato pré-estabelecido, o programa vai funcionar como esperado com a nova dependência implementada.

Abaixo, há ilustrações demonstrando esse princípio



Ilustração, referenciando uma classe concreta


Ilustração, referenciando uma classe abstrata




Exemplo de código que fere o DIP

Exemplo de código que segue o DIP




